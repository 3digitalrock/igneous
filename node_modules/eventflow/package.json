{
  "_args": [
    [
      "eventflow@0.0.6",
      "/srv/dev.3digitalrockstudios.com/igneous/node_modules/node-relations-rethinkdb"
    ]
  ],
  "_from": "eventflow@0.0.6",
  "_id": "eventflow@0.0.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/eventflow",
  "_npmUser": {
    "email": "cpsubrian@gmail.com",
    "name": "cpsubrian"
  },
  "_npmVersion": "1.1.62",
  "_phantomChildren": {},
  "_requested": {
    "name": "eventflow",
    "raw": "eventflow@0.0.6",
    "rawSpec": "0.0.6",
    "scope": null,
    "spec": "0.0.6",
    "type": "version"
  },
  "_requiredBy": [
    "/node-relations-rethinkdb"
  ],
  "_resolved": "https://registry.npmjs.org/eventflow/-/eventflow-0.0.6.tgz",
  "_shasum": "bc7a010db8c991a8a01ebde477cf70dc1f05fe61",
  "_shrinkwrap": null,
  "_spec": "eventflow@0.0.6",
  "_where": "/srv/dev.3digitalrockstudios.com/igneous/node_modules/node-relations-rethinkdb",
  "author": {
    "name": "Brian Link"
  },
  "bugs": {
    "url": "https://github.com/cpsubrian/node-eventflow/issues"
  },
  "dependencies": {
    "async": "0.1.22"
  },
  "description": "Flow control for your event emitters",
  "devDependencies": {
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "bc7a010db8c991a8a01ebde477cf70dc1f05fe61",
    "tarball": "http://registry.npmjs.org/eventflow/-/eventflow-0.0.6.tgz"
  },
  "homepage": "https://github.com/cpsubrian/node-eventflow#readme",
  "keywords": [
    "control",
    "emitter",
    "event",
    "events",
    "flow"
  ],
  "license": "MIT",
  "main": "eventflow.js",
  "maintainers": [
    {
      "name": "cpsubrian",
      "email": "cpsubrian@gmail.com"
    }
  ],
  "name": "eventflow",
  "optionalDependencies": {},
  "readme": "EventFlow\n=========\n\nFlow control for your event emitters.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-eventflow.png)](http://travis-ci.org/cpsubrian/node-eventflow)\n\nAbout\n-----\nEventEmitters are an important part of well-designed node.js applications.\n`on()` and `emit()` can get you pretty far, but wouldn't it be great if you\ncould run your event handlers asynchronously, with a continuation callback?\n\n**EventFlow** adds the flow-controlly-goodness of\n[async](https://github.com/caolan/async) to your event emitters.\n\nUsage\n-----\nAttach eventflow to your event emitter:\n\n```js\nvar EventEmitter = require('events').EventEmitter,\n    require('eventflow')(EventEmitter),\n    emitter = new EventEmitter();\n```\n\nOr, if you prefer not to extend the prototype:\n\n```js\nvar EventEmitter = require('events').EventEmitter,\n    emitter = new EventEmitter();\n\nrequire('eventflow')(emitter);\n```\n\nListen for some events, with or without continuation callbacks. EventFlow does\nsome simple introspection of your listeners to see if they accept a callback\nor not.\n\n```js\nemitter.on('foo', function() {\n  // Do something synchronous\n});\n\nemitter.on('foo', function(callback) {\n  doSomethingAsync(function(bar) {\n    callback();\n  });\n});\n```\n\nNow use one of the flow control methods to invoke your handlers and respond\nwhen they are done.\n\n**series**\n```js\nemitter.series('foo', function() {\n  // The listeners ran in the order they were added and are all finished.\n});\n```\n\n**parallel**\n```js\nemitter.parallel('foo', function() {\n  // The listeners ran in parallel and are all finished.\n});\n```\n\nAdvanced\n--------\n\n**Event listeners with arguments**\n\nEventFlow supports calling your listeners with any number of arguments, as well\nas the optional continuation callback.\n\n```js\n// In your logger or something:\nemitter.on('purchase', function(name, item, cost) {\n  console.log(name + ' just bought ' + item + ' for ' + cost);\n})\n\n// Somwhere else in your code:\nemitter.on('purchase', function(name, item, cost, callback) {\n  saveToDB({name: name, item: item, cost: cost}, callback);\n});\n\n// Perhaps in a form POST handler:\nemitter.series('purchase', 'Brian', 'T-Shirt', '$15.00', function() {\n  // The purchase was logged and saved to the db.\n});\n```\n\n**Using async-style `callback(err, results)`**\n\nEventFlow uses async directly to handle the flow-control, so you can use `err`\nand `results` just like you already do.\n\n```js\n// Synchronous listeners can return a result.\nemitter.on('fruit', function() {\n  return 'apple';\n});\n\n// Async listeners use the standard (err, result) callback.\nemitter.on('fruit', function(callback) {\n  callback(null, 'orange');\n});\n\nemitter.series('fruit', function(err, results) {\n  console.log(results);\n  // [ 'apple', 'orange' ]\n});\n```\n\nInvoke\n------\nEventFlow also exposes the method `emitter.invoke(event, [args...], callback)`.\nInvoke executes using the following rules:\n\n1. There must be EXACTLY one listener for the event. Otherwise the callback\n   is called with an error.\n2. The listener can `return` a value and if so, callback is called with `callback(err, value)`.\n3. The listener can accept a continuation callback and if so, that function should\n   be called with `(err, [value])`.\n\nThink of 'invoke' as in-app RPC via an EventEmitter. Instead of passing\nfunctions around your app in `options` objects, you can invoke them instead.\n\n**Example**\n```js\nemitter.on('add', function(a, b) {\n  return a + b;\n});\nemitter.invoke('add', 1, 2, function(err, value) {\n  console.log(value);\n  // 3\n});\n\n\nemitter.on('subtract', function(a, b, callback) {\n  callback(null, a - b);\n});\nemitter.invoke('subtract', 3, 2, function(err, value) {\n  console.log(value);\n  // 1\n});\n```\n\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\nCopyright (C) 2012 Terra Eclipse, Inc. ([http://www.terraeclipse.com](http://www.terraeclipse.com))\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/node-eventflow.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec"
  },
  "version": "0.0.6"
}
